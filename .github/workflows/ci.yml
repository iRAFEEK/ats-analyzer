name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend linting and testing
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_pass
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng poppler-utils

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Download spaCy model
      run: python -m spacy download en_core_web_sm

    - name: Lint with ruff
      run: |
        cd backend
        ruff check . --output-format=github

    - name: Format check with black
      run: |
        cd backend
        black --check .

    - name: Type check with mypy
      run: |
        cd backend
        mypy ats_analyzer --ignore-missing-imports
      continue-on-error: true  # MyPy can be strict, allow to continue

    - name: Run tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/backend
      run: |
        cd backend
        pytest -v --cov=ats_analyzer --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend linting and testing
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint with ESLint
      run: |
        cd frontend
        npm run lint

    - name: Type check
      run: |
        cd frontend
        npm run type-check

    - name: Run unit tests
      run: |
        cd frontend
        npm run test -- --coverage --watchAll=false

    - name: Build application
      run: |
        cd frontend
        npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # End-to-end testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Playwright
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps

    - name: Start services with Docker Compose
      run: |
        cd infra
        docker compose -f docker-compose.dev.yml up -d
        # Wait for services to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Playwright tests
      run: |
        cd frontend
        npm run e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

    - name: Stop services
      if: always()
      run: |
        cd infra
        docker compose -f docker-compose.dev.yml down -v

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency check
  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check Python dependencies
      run: |
        cd backend
        pip install safety
        safety check -r requirements.txt --json || true

    - name: Check Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level=high || true

  # Build and push Docker images (on main branch)
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ats-analyzer-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/ats-analyzer-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ats-analyzer-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/ats-analyzer-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment (placeholder)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step - integrate with your deployment system"
        echo "Docker images tagged with: ${{ github.sha }}"
        # Add your deployment logic here
        # Examples:
        # - Update Kubernetes manifests
        # - Trigger AWS ECS deployment
        # - Update Docker Swarm services
        # - Deploy to cloud providers
